
macro "count96" {
  setBatchMode(true);
  main();
  setBatchMode(false);
}

function main() {
  FS = File.separator();

  project_path = getDirectory("Choose a Directory");

  position_string = "[A-Z][0-9]+[a-z]"+FS;
  position_dirs = getMatchingDirs(project_path,position_string);

  results_path = project_path+"results/";
  File.makeDirectory(results_path);



  size = "1-200";
  circ = "0.50-1.0";
  radius = 50;
  tol = 10;
  area_thresh = 4;
  sd_area_thresh = 152;

  Dialog.create("Set Parameters");
  Dialog.addString("Size (pixels^2):", size, 10);
  Dialog.addString("Circularity:", circ, 10);
  Dialog.addNumber("Rolling ball radius:", radius);
  Dialog.addNumber("Find Maxima Tolerance:", tol);
  Dialog.addNumber("Area Threshold:",area_thresh);
  Dialog.addNumber("SD/Area Threshold:",sd_area_thresh);
  Dialog.show();
  size = Dialog.getString();
  circ = Dialog.getString();
  radius = Dialog.getNumber();
  tol = Dialog.getNumber();
  area_thresh = Dialog.getNumber();
  sd_area_thresh = Dialog.getNumber();

  position_names = newArray(position_dirs.length);
  wl_names = newArray(20);
  count_array = newArray(position_dirs.length*wl_names.length);
  count = 0;
  wls = 0;
  for (i=0;i<wl_names.length;i++) wl_names[i] = "";

  for (z=0;z<position_dirs.length;z++) {
    //print("Entering position folder "+position_dirs[z]);
    position_name = replace(position_dirs[z],FS,"");
    position_names[z] = position_name;
    position_path = project_path+position_dirs[z];

    wl_string = "WL0"+FS;
    wl_dirs = getMatchingDirs(position_path,wl_string);

    for (j=0;j<wl_dirs.length;j++) {
      //print("Entering wavelength "+wl_dirs[j]);
      wl_name = replace(wl_dirs[j],FS,"");

      if (z == 0) {
        wl_names[j] = wl_name;
        wls++;
      }

      wl_path = position_path+wl_dirs[j];
      wl_data_path = wl_path+wl_name+"_data/";
      File.makeDirectory(wl_data_path);

      print("Processing "+position_name+", "+wl_name+"...");

      image = getImages(wl_path);
      path_to_image = wl_path+image;
      image_name = replace(image,'.tif',"");
      open(path_to_image);
      original_image_id = getImageID();

      run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel global");

      path_to_flat = wl_data_path+image_name+"_flat.tif";
      path_to_final_selections = wl_data_path+image_name+"_final_selections.zip";
      path_to_initial_selections = wl_data_path+image_name+"_initial_selections.zip";


      roiManager("Reset");
      bg_sub_id = flatten(original_image_id,path_to_image,radius);
      selectImage(bg_sub_id);
      run("Enhance Contrast", "saturated=0.5 normalize");
      run("16-bit");
      save(path_to_flat);

      run("Duplicate...", "title=bg_mask.tif");
      mask_id = getImageID();
      getBackground(mask_id,wl_data_path);
      saveAs("png",wl_data_path+image_name+"_mask.png");
      close();


      setForegroundColor(255,255,255);
      selectImage(bg_sub_id);
      removeBackground(bg_sub_id,wl_data_path);
      makeSelections(bg_sub_id,tol,size,circ);
      selectImage(bg_sub_id);
      close();

      n_orig_sels = roiManager("count");
      open(path_to_flat);
      flat_id = getImageID();
      run("16-bit");

      // Weed out artifacts by making a list of selections with low SD/area.
      artifact_array = findArtifacts(sd_area_thresh,area_thresh,n_orig_sels);
      deleteSelections(artifact_array,n_orig_sels);
      roiManager("Deselect");

      f = File.open(wl_data_path+image_name+"_fm"+tol+"_data.txt");

      selectImage(flat_id);
      nsels = roiManager("count");
      count_array[count++] = nsels;
      print(f, "'Find Maxima' Threshold\t"+tol);
      print(f, "SD/Area threshold\t"+sd_area_thresh);
      print(f, "Total counts\t"+nsels);
      print(f, "Deleted\t"+n_orig_sels-nsels+"\t("+nsels/(n_orig_sels+nsels)+"%)");
      print(f, "\n");
      print(f, "selection\tx\ty\tarea\tmean\tsd\tmax");
      for (i=0;i<nsels;i++) {
        sel = d2s(i+1,0);
        roiManager("select",i);
        roiManager("Rename",sel);
        List.setMeasurements;
        area = List.getValue("Area");
        mean = List.getValue("Mean");
        x    = List.getValue("X");
        y    = List.getValue("Y");
        sd   = List.getValue("StdDev");
        max  = List.getValue("Max");
        print(f, sel+"\t"+x+"\t"+y+"\t"+area+"\t"+mean+"\t"+sd+"\t"+max);
      }
      File.close(f);
      roiManager("Save", path_to_final_selections);
      roiManager("Deselect");
      roiManager("Reset");

      drawSelections(flat_id,path_to_initial_selections,path_to_final_selections,wl_data_path);
      selectImage(flat_id);
      close();

      print("Done");
    } // end of wavelength
  } // end of position

  wl_name_string = "";
  for (i=0;i<wls;i++) {
    if (i == wls-1) {
      wl_name_string = wl_names[i++];
    } else {
      wl_name_string = wl_names[i++] + "\t";
    }
  } 

  f = File.open(results_path+"counts.txt");
  print(f, "\t"+wl_name_string);

  for (i=0;i<position_names.length;i++) {
    count_string = "";
    count_string = count_string+position_names[i]+"\t";
    for (j=0;j<wls;j++) {
      if (j == wls-1) {
        count_string = count_string+count_array[(wls*i)+j];
      } else {
        count_string = count_string+count_array[(wls*i)+j] + "\t";
      }
    }
    print(f, count_string);
  }
}

function drawSelections(id,ptis,ptfs,data_path) {
  selectImage(id);
  run("RGB Color");

  roiManager("Open", ptis);
  setForegroundColor(255,0,0);
  roiManager("Draw");
  roiManager("Reset");
  roiManager("Open", ptfs);
  setForegroundColor(0,255,0);
  roiManager("Draw");
  save(data_path+"selection_image.png");
}

function makeSelections(id,t,s,c) {
  roiManager("reset");
  selectImage(id);

  run("8-bit");
  run("Gaussian Blur...", "sigma=0.5");
  run("Find Maxima...", "noise="+t+" output=[Segmented Particles]");
  run("Analyze Particles...", "size="+s+" circularity="+c+" show=Nothing clear add");
  close();
  roiManager("Save", path_to_initial_selections);
}

function getImages(path) {
  contents = getFileList(path);
  tifs = 0;
  tif_name = "";
  for (i=0;i<contents.length;i++) {
    if ( matches(contents[i], '.*\.tif') ) {
      tif_name = contents[i];
      tifs++;
    }
  }
  if (tifs > 1) exit("Too many images in folder '"+path+"'.");
  if (tifs == 0) exit("No tifs in folder '"+path"'.");
  return tif_name;
}

function getMatchingDirs(path,match) {
  contents = getFileList(path);
  n = 0;
  names = newArray(contents.length);
  for (i=0;i<contents.length;i++) {
    if ( matches(contents[i], match) ) {
      //print("Matched "+contents[i]);
      names[i] = contents[i];
      n++;
    }
  }

  if (n == 0) exit("Didn't find any matches to "+match+" in "+path);

  good_dirs = newArray(n);
  gdi = 0;
  for (i=0;i<names.length;i++) {
    if ( matches(names[i], match) ) {
      //print("Copying "+ names[i]);
      good_dirs[gdi++] = names[i];
    }
  }
  return good_dirs;
}


function findArtifacts(s,a,n) {
  arti = newArray(n);
  for (i=0;i<n;i++) {
    roiManager("select",i);
    List.setMeasurements;
    area  = List.getValue("Area");
    stdev = List.getValue("StdDev");
    if (stdev/area <= s || area < a) {
      //print("Marking "+(i+1)+" for deletion.");
      arti[i] = i;
    } else {
      arti[i] = 0;
    }
  }
  return arti;
}

function deleteSelections(arr, n) {
  for (i=0;i<n;i++) {
    if (arr[i] != 0) {
      roiManager("select", arr[i]);
      roiManager("Delete");
      //print("Deleting "+(i+1));
      for (j=i;j<arr.length;j++) {
        if (arr[j] > 0) {
          arr[j]--;
        }
      }
    }
  }
}

function removeBackground(id,data_path) {
  selectImage(id);
  run("8-bit");
  roiManager("Select", 0);
  List.setMeasurements;
  mean_bg = round(List.getValue("Mean"));
  run("Fill");
  run("Select None");
  setMinAndMax(0,mean_bg);
  run("Apply LUT");
  saveAs("tif",data_path+image_name+"_bg_sub.tif");
}

function flatten(id,path_to_orig,r) {
  bg_name   = "background";
  orig_name = "original";

  selectImage(id);
  rename(bg_name);

  run("Select None");
  run("Gaussian Blur...", "sigma=10");
  run("Subtract Background...", "rolling="+r+" light create sliding");
  bg_id = getImageID();
  open(path_to_orig);
  orig_id = getImageID();
  rename(orig_name);

  imageCalculator("Subtract create 32-bit", orig_name, bg_name);
  rename(image_name+"_flat.tif");
  f_id = getImageID();

  selectImage(bg_id);
  close();
  selectImage(orig_id);
  close();
  return f_id;
}

function getBackground(id,data_path) {
  selectImage(id);

  run("8-bit");
  run("Gaussian Blur...", "sigma=1");
  run("Variance...", "radius=3");
  setAutoThreshold("RenyiEntropy dark");
  run("Convert to Mask");
  run("Fill Holes");
  run("Create Selection");
  run("Make Inverse");
  roiManager("Add");
  roiManager("Select", 0);
  roiManager("Rename", "bg_mask");
  roiManager("Save", data_path+image_name+"_bg_selection.zip");
  run("Select None");
}

function printa(arr) {
  for (i=0;i<arr.length;i++) {
    print(arr[i]);
  }
}
